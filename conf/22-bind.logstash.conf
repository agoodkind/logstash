filter {
    if [type] == "syslog" and [process][name] == "named" {
        mutate {
            add_field => {
                "log_type" => "bind"
                "[data_stream][type]" => "logs"
                "[data_stream][dataset]" => "named"
                "[data_stream][namespace]" => "bind"
                "service" => "bind"
            }
        }

        grok {
            match => {
                "syslog_message" => [
                "%{DATA:log_category}: %{LOGLEVEL:log_level}: client @%{DATA:client_handle} %{IPORHOST:client_ip}#%{INT:client_port} \(%{DATA:query_name}\): query: %{DATA:query_fqdn} %{WORD:query_class} %{WORD:query_type} %{DATA:query_flags} \(%{IPORHOST:response_ip}\)",
                "%{DATA:log_category}: %{LOGLEVEL:log_level}: zone %{DATA:zone_name}/%{WORD:zone_class}: %{GREEDYDATA:zone_message}",
                "%{DATA:log_category}: %{LOGLEVEL:log_level}: received control channel command '%{DATA:rndc_command}'",
                "%{DATA:log_category}: %{LOGLEVEL:log_level}: %{GREEDYDATA:log_message}"
                ]
            }
        }

        if [query_fqdn] {
            mutate {
                add_tag => ["dns_query"]
            }
        }

        if [zone_name] {
            mutate {
                add_tag => ["zone_update"]
            }
        }

        mutate {
            remove_field => ["syslog_message"]
            remove_tag => ["_grokparsefailure"]
        }
    }
}

